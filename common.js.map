{"version":3,"sources":["./src/app/shared/admin-base.ts"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACuG;AAEtG;AAIlC,MAAe,SAAS;IAQ7B,YAAmB,eAAiC,EAAS,mBAA2C;QAArF,oBAAe,GAAf,eAAe,CAAkB;QAAS,wBAAmB,GAAnB,mBAAmB,CAAwB;QAHjG,kBAAa,GAAG,IAAI,iDAAY,EAAE,CAAC;IAGiE,CAAC;IAErG,oBAAoB;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,sBAAsB,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wBAAwB,CAAC,SAA4B,EAAE,MAAc,EAAE,WAAmB,EAAE,oBAAoB,GAAG,KAAK;QAC7H,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe;aAC7B,MAAM,CAAC,MAAM,CAAC;aACd,WAAW,EAAE;aACb,IAAI,CACH,8DAAO,CAAC,CAAC,CAAkB,EAAE,EAAE;YAC7B,IAAI,CAAC,CAAC,EAAE,EAAE;gBACR,IAAI,oBAAoB;oBAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBACtD,OAAO,+CAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;aACrC;iBAAM;gBACL,SAAS,CAAC,KAAK,EAAE,CAAC;gBAClB,OAAO,+CAAE,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CACH;aACA,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,0DAAgB,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAEM,mCAAmC,CAAC,WAAmC,EAAE,MAAc,EAAE,WAAmB,EAAE,oBAAoB,GAAG,KAAK;QAC/I,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe;aAC7B,MAAM,CAAC,MAAM,CAAC;aACd,WAAW,EAAE;aACb,IAAI,CACH,8DAAO,CAAC,CAAC,CAAkB,EAAE,EAAE;YAC7B,IAAI,CAAC,CAAC,EAAE,EAAE;gBACR,IAAI,oBAAoB;oBAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBACtD,OAAO,+CAAE,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC;aACrC;iBAAM;gBACL,WAAW,CAAC,OAAO,EAAE,CAAC;gBACtB,OAAO,+CAAE,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CACH;aACA,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,0DAAgB,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;CACF","file":"common.js","sourcesContent":["import { FormGroup } from '@angular/forms';\nimport { of, Subscription } from 'rxjs';\nimport { NotificationType, UiFormFieldInput, UiFormFieldSelect, UiFormFieldTextArea, UiNotificationService, UiPromptService } from '@xenon/ui';\nimport { LoggedInUser } from '@xenon/api';\nimport { flatMap } from 'rxjs/operators';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { MatBottomSheetRef } from '@angular/material/bottom-sheet';\n\nexport abstract class AdminBase {\n  public form: FormGroup;\n  public fieldsAsObject: object;\n  public editMode: boolean;\n  public fields: (UiFormFieldInput | UiFormFieldSelect | UiFormFieldTextArea)[];\n  public subscriptions = new Subscription();\n  public loggedInUser: LoggedInUser;\n\n  constructor(public uiPromptService?: UiPromptService, public notificationService?: UiNotificationService) {}\n\n  public showValidationErrors(): void {\n    this.form.markAllAsTouched();\n    Object.keys(this.form.controls).forEach((key) => {\n      this.form.get(key).updateValueAndValidity();\n    });\n  }\n\n  public openUnsavedChangesPrompt(dialogRef: MatDialogRef<any>, prompt: string, stayMessage: string, showValidationErrors = false) {\n    const sub = this.uiPromptService\n      .prompt(prompt)\n      .afterClosed()\n      .pipe(\n        flatMap((r: { ok: boolean }) => {\n          if (r.ok) {\n            if (showValidationErrors) this.showValidationErrors();\n            return of({ Message: stayMessage });\n          } else {\n            dialogRef.close();\n            return of({ Message: 'Changes not saved.' });\n          }\n        })\n      )\n      .subscribe((m) => {\n        this.notificationService.show(NotificationType.success, '', m.Message, 2500);\n      });\n\n    this.subscriptions.add(sub);\n  }\n\n  public OpenUnsavedChangesPromptBottomSheet(bottomSheet: MatBottomSheetRef<any>, prompt: string, stayMessage: string, showValidationErrors = false) {\n    const sub = this.uiPromptService\n      .prompt(prompt)\n      .afterClosed()\n      .pipe(\n        flatMap((r: { ok: boolean }) => {\n          if (r.ok) {\n            if (showValidationErrors) this.showValidationErrors();\n            return of({ Message: stayMessage });\n          } else {\n            bottomSheet.dismiss();\n            return of({ Message: 'Changes not saved.' });\n          }\n        })\n      )\n      .subscribe((m) => {\n        this.notificationService.show(NotificationType.success, '', m.Message, 2500);\n      });\n\n    this.subscriptions.add(sub);\n  }\n}\n"],"sourceRoot":"webpack:///"}